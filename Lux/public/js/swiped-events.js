/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/swiped-events.js":
/*!***************************************!*\
  !*** ./resources/js/swiped-events.js ***!
  \***************************************/
/***/ (() => {

eval("/*!\r\n * swiped-events.js - v@version@\r\n * Pure JavaScript swipe events\r\n * https://github.com/john-doherty/swiped-events\r\n * @inspiration https://stackoverflow.com/questions/16348031/disable-scrolling-when-touch-moving-certain-element\r\n * @author John Doherty <www.johndoherty.info>\r\n * @license MIT\r\n */\n(function (window, document) {\n  'use strict'; // patch CustomEvent to allow constructor creation (IE/Chrome)\n\n  if (typeof window.CustomEvent !== 'function') {\n    window.CustomEvent = function (event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    };\n\n    window.CustomEvent.prototype = window.Event.prototype;\n  }\n\n  document.addEventListener('touchstart', handleTouchStart, false);\n  document.addEventListener('touchmove', handleTouchMove, false);\n  document.addEventListener('touchend', handleTouchEnd, false);\n  var xDown = null;\n  var yDown = null;\n  var xDiff = null;\n  var yDiff = null;\n  var timeDown = null;\n  var startEl = null;\n  /**\r\n   * Fires swiped event if swipe detected on touchend\r\n   * @param {object} e - browser event object\r\n   * @returns {void}\r\n   */\n\n  function handleTouchEnd(e) {\n    // if the user released on a different target, cancel!\n    if (startEl !== e.target) return;\n    var swipeThreshold = parseInt(getNearestAttribute(startEl, 'data-swipe-threshold', '20'), 10); // default 20px\n\n    var swipeTimeout = parseInt(getNearestAttribute(startEl, 'data-swipe-timeout', '500'), 10); // default 500ms\n\n    var timeDiff = Date.now() - timeDown;\n    var eventType = '';\n    var changedTouches = e.changedTouches || e.touches || [];\n\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      // most significant\n      if (Math.abs(xDiff) > swipeThreshold && timeDiff < swipeTimeout) {\n        if (xDiff > 0) {\n          eventType = 'swiped-left';\n        } else {\n          eventType = 'swiped-right';\n        }\n      }\n    } else if (Math.abs(yDiff) > swipeThreshold && timeDiff < swipeTimeout) {\n      if (yDiff > 0) {\n        eventType = 'swiped-up';\n      } else {\n        eventType = 'swiped-down';\n      }\n    }\n\n    if (eventType !== '') {\n      var eventData = {\n        dir: eventType.replace(/swiped-/, ''),\n        touchType: (changedTouches[0] || {}).touchType || 'direct',\n        xStart: parseInt(xDown, 10),\n        xEnd: parseInt((changedTouches[0] || {}).clientX || -1, 10),\n        yStart: parseInt(yDown, 10),\n        yEnd: parseInt((changedTouches[0] || {}).clientY || -1, 10)\n      }; // fire `swiped` event event on the element that started the swipe\n\n      startEl.dispatchEvent(new CustomEvent('swiped', {\n        bubbles: true,\n        cancelable: true,\n        detail: eventData\n      })); // fire `swiped-dir` event on the element that started the swipe\n\n      startEl.dispatchEvent(new CustomEvent(eventType, {\n        bubbles: true,\n        cancelable: true,\n        detail: eventData\n      }));\n    } // reset values\n\n\n    xDown = null;\n    yDown = null;\n    timeDown = null;\n  }\n  /**\r\n   * Records current location on touchstart event\r\n   * @param {object} e - browser event object\r\n   * @returns {void}\r\n   */\n\n\n  function handleTouchStart(e) {\n    // if the element has data-swipe-ignore=\"true\" we stop listening for swipe events\n    if (e.target.getAttribute('data-swipe-ignore') === 'true') return;\n    startEl = e.target;\n    timeDown = Date.now();\n    xDown = e.touches[0].clientX;\n    yDown = e.touches[0].clientY;\n    xDiff = 0;\n    yDiff = 0;\n  }\n  /**\r\n   * Records location diff in px on touchmove event\r\n   * @param {object} e - browser event object\r\n   * @returns {void}\r\n   */\n\n\n  function handleTouchMove(e) {\n    if (!xDown || !yDown) return;\n    var xUp = e.touches[0].clientX;\n    var yUp = e.touches[0].clientY;\n    xDiff = xDown - xUp;\n    yDiff = yDown - yUp;\n  }\n  /**\r\n   * Gets attribute off HTML element or nearest parent\r\n   * @param {object} el - HTML element to retrieve attribute from\r\n   * @param {string} attributeName - name of the attribute\r\n   * @param {any} defaultValue - default value to return if no match found\r\n   * @returns {any} attribute value or defaultValue\r\n   */\n\n\n  function getNearestAttribute(el, attributeName, defaultValue) {\n    // walk up the dom tree looking for attributeName\n    while (el && el !== document.documentElement) {\n      var attributeValue = el.getAttribute(attributeName);\n\n      if (attributeValue) {\n        return attributeValue;\n      }\n\n      el = el.parentNode;\n    }\n\n    return defaultValue;\n  }\n})(window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/swiped-events.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/swiped-events.js"]();
/******/ 	
/******/ })()
;